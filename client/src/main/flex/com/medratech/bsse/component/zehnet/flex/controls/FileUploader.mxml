<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
	creationComplete="init();">
	
	<mx:Script>
		<![CDATA[
			import com.medratech.bsse.component.RemoteDoubleClickDataGrid;

			/**
			
			   	** LICENSE **
				
				Copyright Â© 2009 N. Zeh <http://www.zehnet.de/>
			   
			    This file is free software: you can redistribute it and/or modify
			    it under the terms of the GNU General Lesser Public License as published by
			    the Free Software Foundation (version 2.1).
				For more information see: http://creativecommons.org/licenses/LGPL/2.1/
			
			    This program is distributed in the hope that it will be useful,
			    but WITHOUT ANY WARRANTY; without even the implied warranty of
			    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
			    GNU General Public License for more details.
				
				
				** ACKNOWLEDGEMENTS **
				
				This plugin makes use of the Silk Icon Set 1.3 by
				Mark James <http://www.famfamfam.com/lab/icons/silk/>
				licensed under Creative Commons Attribution 2.5 License.
				
			*/
		
			import com.medratech.bsse.component.zehnet.flex.controls.fileUploaderClasses.FileStateHandler;  
			import com.medratech.bsse.component.zehnet.net.FileUpload; 
			import com.medratech.bsse.component.zehnet.net.BigFileUpload; 
			import com.medratech.bsse.component.zehnet.events.FileUploadErrorEvent;
			import com.medratech.bsse.component.zehnet.events.FileUploadEvent; 
			
			import mx.collections.ArrayCollection;
			import mx.events.PropertyChangeEvent;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.core.BitmapAsset;
			
			import flash.net.FileReference;
			import flash.net.FileReferenceList;
			import flash.net.FileFilter;
			import flash.net.URLRequest;
			import flash.net.URLVariables;
			import flash.utils.Timer;
			
			
			private var fileList:ArrayCollection;
			
			private var refList:FileReferenceList;
			
			private var loading:Boolean = false;
			private var currentIndex:int = 0;
			private var currentFile:FileStateHandler;
			
			private var urlRequest:URLRequest = new URLRequest();
			
			[Bindable]
			public var dataGrid:RemoteDoubleClickDataGrid = null;
			[Bindable]
			public var type:int = 0;
			
			/**
			 * 
			 */			
			private function init():void
			{
				fileList = new ArrayCollection();
				
				refList = new FileReferenceList();
               	refList.addEventListener(Event.SELECT, onSelect);
                
                list.dataProvider = fileList;
         		
         		BigFileUpload.maxPostSize = _maxPostSize;
         		
                statsChanged();
                uploaderStateChanged();
			}
		
			// PUBLIC PROPERTIES
			
			// Property: uploadUrl
			
			/**
			 * 
			 */
			[Bindable]
			public function get uploadUrl():String
			{
				return urlRequest.url;
			} 

			/**
			 * 
			 */
			public function set uploadUrl(url:String):void
			{
				urlRequest.url = url;
			} 
			
			// Property: urlVariables
			
			/**
			 * 
			 */
			[Bindable]
			public function get urlVariables():URLVariables
			{
				return urlRequest.data as URLVariables;
			} 

			/**
			 * 
			 */
			public function set urlVariables(data:URLVariables):void
			{
				urlRequest.data = data;
			} 
		
			// Property: fileFilterArray
			
			private var _fileFilterArray:Array = null;
			
			/**
			 * 
			 */
			[Bindable]
			public function get fileFilterArray():Array
			{
				return _fileFilterArray;
			} 

			/**
			 * 
			 */
			public function set fileFilterArray(filterArr:Array):void
			{
				_fileFilterArray = filterArr;
			} 
		
			// Property: maxFileSize

			private var _maxFileSize:Number = 104857600; // Flash Player Limit 100 mb
			
			/**
			 * 
			 */
			[Bindable]
			public function get maxFileSize():Number
			{
				return _maxFileSize;
			} 

			/**
			 * 
			 */
			public function set maxFileSize(size:Number):void
			{
				_maxFileSize = size;
			} 			

			// Property: maxFiles

			private var _maxFiles:Number = 0; // 0 = no limit
			
			/**
			 * 
			 */
			[Bindable]
			public function get maxFiles():Number
			{
				return _maxFiles;
			} 

			/**
			 * 
			 */
			public function set maxFiles(size:Number):void
			{
				_maxFiles = size;
			}

			// Property: maxPostSize

			private var _maxPostSize:Number = 2097152; // 2 mb (PHP default upload max size)
			
			/**
			 * 
			 */
			[Bindable]
			public function get maxPostSize():Number
			{
				return _maxPostSize;
			} 

			/**
			 * 
			 */
			public function set maxPostSize(size:Number):void
			{
				_maxPostSize = BigFileUpload.maxPostSize = Math.round(size);
			}
			
			/**
			 * 
			 */
			public function upload():void
			{
				if(!loading)
				{
					if(!uploadUrl)
					{
						Alert.show('No uploadUrl was specified!');
						return;
					}
					currentIndex = -1;
					loading = true;
					uploaderStateChanged();
					uploadNextFile();
				}
			} 

			/**
			 * 
			 */
			public function cancel():void
			{
				if(loading)
				{
					if(currentFile != null) 
					{
						currentFile.cancel();
						currentFile = null;
					}
					loading = false;
					uploaderStateChanged();
					statsChanged();				
				}
			} 

			// PUBLIC METHODS
			
			/**
			 * 
			 */
			public function addFile(file:FileReference):Boolean
			{		
				// file checks
				switch(true)
				{
					// if file size exceeds maximum
					case(file.size > maxFileSize):
						showError('file size exceeds maximum ('+size2str(maxFileSize)+'): '+file.name);
						return false;
					// if there are already maxFiles in the Upload list
					case(maxFiles>0 && fileList.length >= maxFiles):
						showError('the list maximum of '+maxFiles+' files is reached');
						return false;
					// if the file to add is already in the list
					case(isInList(file)):
						showError('file already in list: '+file.name);
						return false;
					// if BigFileUpload is not supported and the file size exceeds the maximum
					// size of one post request (maxPostSize)
					case(!BigFileUpload.bigFileIsSupported && file.size > maxPostSize):
						showError('file size exceeds post maximum ('+size2str(maxPostSize)+'): '+file.name);
						return false;
				}
				
				var f:FileUpload;
				
				if(file.size > maxPostSize)
				{
					f = new BigFileUpload(file);
				}
				else
				{
					f = new FileUpload(file);
				}
				
				fileList.addItem( new FileStateHandler(f) );

				statsChanged();	
				
				return true;
			}
			
			/**
			 * 
			 */
			private function onSelect(e:Event):void
			{
		        for (var a:Array=refList.fileList, i:uint = 0; i<a.length; i++)
		        {
		            addFile(FileReference(a[i]));
		        }				
			}

			/**
			 * 
			*/
			private function uploadNextFile():void
			{	
				if(currentFile != null)
				{
					currentFile.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE,onPropertyChange);
					currentFile = null;
				}
						
				if(currentIndex+1 >= fileList.length)
				{			
					loading = false;
					uploaderStateChanged();
					statsChanged();
					return;
				}
				
				for(var i:int=currentIndex+1, n:int=fileList.length, f:FileStateHandler, e:FileStateHandler, m:int; i<n; i++)
				{
					f = FileStateHandler(fileList.getItemAt(i));
					
					if(f.status == FileStateHandler.PENDING)
					{
						currentFile = f;
						currentIndex = i;					
						break;
					}
					else if(f.status == FileStateHandler.ERROR && f.errorID != FileUploadErrorEvent.ID_FILE_EXISTS) // retry errornous
					{
						e = f;
						m = i;
					}
				}
				
				if(currentFile == null && e != null)
				{
					currentFile = e;
					currentIndex = m;
				}
				
				if(currentFile != null)
				{
					currentFile.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE,onPropertyChange);
					
					list.scrollToIndex(currentIndex);
					
					currentFile.upload(urlRequest);
				}
				
				statsChanged();
			}
			
			// LISTENERS
			
			private function onPropertyChange(e:PropertyChangeEvent):void
			{		
				if(e.property == 'status')
				{
					switch(e.newValue)
					{
						case(FileStateHandler.COMPLETED):
							uploadNextFile();
							if(dataGrid != null)
								dataGrid.changeSelectedCategory(type);							
							break;
						
						case(FileStateHandler.ERROR):
							(currentFile.errorID == FileUploadErrorEvent.ID_FILE_EXISTS)
							? showFileExistsAlert()
							: uploadNextFile();
							break;
					}
				}
				
				if(e.property == 'bytesLoaded') statsChanged();	
			}

			/**
			 * 
			 */			
			private function showFileExistsAlert():void
			{
				Alert.show(
					currentFile.name+resourceManager.getString('resources', 'scat.file.upload.overwrite.text'),
					resourceManager.getString('resources', 'scat.file.upload.overwrite.caption'),
					Alert.NO | Alert.YES,
					this, 
					overwriteFile,
					null,
					Alert.NO
				);
			}

			/**
			 * 
			 */			
			private function overwriteFile(event:CloseEvent):void
			{
				(event.detail == Alert.YES)
				? currentFile.upload(urlRequest, true)
				: uploadNextFile();
			}
		
			// USER GUI INTERACTION

			/**
			 * 
			 */			
			private function clickAddFiles():void
			{
				refList.browse(_fileFilterArray);
			}

			/**
			 * 
			 */
			private function clickRemoveFiles():void
			{
				var a:Array = list.selectedIndices;
				
				for(var i:int=0; i<a.length; i++)
				{
					if(FileStateHandler(fileList.getItemAt(a[i])).status != FileStateHandler.UPLOADING)
					{
						fileList.removeItemAt(a[i]);
						
						if(a[i] < currentIndex) currentIndex--;
					}
				}
				statsChanged();
			}

			/**
			 * 
			 */
			private function clickUploadFiles():void
			{
				if(tag.text.length > 0)
					urlRequest.url = urlRequest.url + "&tag="+tag.text;
					
				loading ? cancel() : upload();
			}
			
			// 

			/**
			 * 
			 */			
			private function uploaderStateChanged():void
			{
				if(loading)
				{
					btnUpload.label = resourceManager.getString('resources', 'scat.file.upload.cancel');
					btnUpload.toolTip = resourceManager.getString('resources', 'scat.file.upload.cancel.tooltip');
					btnUpload.setStyle('fillColors',['#F59187', '#BA3C2F']);
					btnUpload.setStyle('themeColor','#F32C17');					
				}
				else
				{
					btnUpload.label = resourceManager.getString('resources', 'scat.file.upload.upload');
					btnUpload.toolTip = resourceManager.getString('resources', 'scat.file.upload.upload.tooltip');
					btnUpload.setStyle('fillColors',['#D1E1D1', '#4DA24B']);
					btnUpload.setStyle('themeColor','#49CE46');					
				}
			}
			
			private var errTimer:Timer;
			/**
			 * 
			 */			
			private function showError(msg:String):void
			{
				status.htmlText = '<font color="#ff6600"><b>Error</b>: '+msg+'</font>';
				if(errTimer == null)
				{
					errTimer = new Timer(3000,1);
					errTimer.addEventListener(TimerEvent.TIMER_COMPLETE,statsChanged);
				}
				else if(errTimer.running)
				{
					errTimer.reset();	
				}
				errTimer.start();
			}
		
			/**
			 * 
			 */			
			private function statsChanged(event:Event=null):void
			{
				var size:int = 0, loaded:int=0, lnum:int=0, percent:int=0, lasts:String='';
				for(var i:int=0, n:int=fileList.length, f:FileStateHandler; i<n; i++)
				{
					f = FileStateHandler(fileList.getItemAt(i));
					size += f.size;
					
					if(f.status == FileStateHandler.COMPLETED)
					{
						loaded += f.size;
						lnum++;
					}
					else if(f.status == FileStateHandler.UPLOADING)
					{
						loaded += f.bytesLoaded;
					}
				}
				if(loaded>0) percent = Math.ceil(loaded/size*100);
				
				if(currentFile && currentFile.status==FileStateHandler.UPLOADING)
				{
					lasts = ' ('+formatTime(Math.round( (size-loaded) / currentFile.bytesPerSecond))+')';
				}
				
				status.htmlText = 	'<b>loaded</b>('+lnum+' files - ' + size2str(loaded)
									+')<b> / total</b>('+n+' files - ' 
									+ size2str(size)+')<b> '
									+ percent + '%</b>'
									+ lasts;
			
				btnRemove.enabled = (fileList.length>0);
				
				btnUpload.enabled = (loaded<size);
			}

			// HELPER METHODS

			/**
			 * 
			 */			
			private function isInList(file:FileReference):Boolean
			{
				for(var i:int=0, n:int=fileList.length, f:FileStateHandler; i<n; i++)
				{
					f = FileStateHandler(fileList.getItemAt(i));
					if(f.name == file.name) return true;
				}
				return false;
			}

			/**
			 * 
			 */			
			public function size2str(size:Number):String
			{
				var m:Array = [ " Bytes", " Kb", " Mb" ];
				for(var i:int=0,n:int=m.length; i<n && size>=1024; i++)
				{
					size /= 1024;
				}
				return (i>0 ? size.toFixed(i) : int(size) ) + m[i]; // => Bytes: 0 fraction digits ; Kb: 1 ; Mb: 2
			}
			
			/**
			 * 
			 */			
			public function formatTime(seconds:Number):String
			{
				var str:String='', m:Array = [ "s", "m ", "h " ];
				for(var i:int=0,n:int=m.length,t:int; i<n && seconds>0; i++)
				{
					t = (seconds % 60);
					str = (t<10 ? '0'+ t : t) + m[i] + str;
					seconds = Math.floor(seconds/60);
				}
				return str;
			}
					
		]]>
	</mx:Script>

	<mx:List id="list" variableRowHeight="true" allowMultipleSelection="true"
		 left="0" right="0" top="0" bottom="100" alternatingItemColors="[#FFFFFF, #F0F0F0]">
		<mx:itemRenderer>
			<mx:Component>
				<mx:Canvas width="100%" initialize="init()">

					<mx:Script>
				        <![CDATA[
				        	import com.medratech.bsse.component.zehnet.flex.controls.fileUploaderClasses.FileStateHandler;
							import mx.core.ScrollPolicy;
							
							[Embed(source="./fileUploaderClasses/page_white_add.png")]
				            [Bindable]
				            public var pending:Class;
				            
				            [Embed(source="./fileUploaderClasses/tick.png")]
				            [Bindable]
				            public var completed:Class;
				            
				            [Embed(source="./fileUploaderClasses/page_white_get.png")]
				            [Bindable]
				            public var ramloading:Class;
				            
				            [Embed(source="./fileUploaderClasses/page_white_key.png")]
				            [Bindable]
				            public var checksumming:Class;
				            
				            [Embed(source="./fileUploaderClasses/page_white_go.png")] //  arrow_right.png
				            [Bindable]
				            public var uploading:Class; 
				            
				            [Embed(source="./fileUploaderClasses/cross.png")]
				            [Bindable]
				            public var error:Class; 
							
							private var _currentState:int;
							private var _currentImg:Class;
							private var _currentTrackCol:int;
							
							public function init():void
				            {  
				            	horizontalScrollPolicy = ScrollPolicy.OFF;            
				            }
							
				            override public function set data(value:Object):void
				            {      
				                super.data = value;
				                
				                if(value != null)
				                {			                	
				                	 
				                	var file:FileStateHandler = FileStateHandler(value);
						                    
				                    switch(file.status)
				                    {
				                    	case(FileStateHandler.PENDING):
				                    		switchState(1,pending);
				                    		break;
				                    	
				                    	case(FileStateHandler.COMPLETED):
				                    		switchState(1,completed);
				                    		break;
				                    	
				                    	case(FileStateHandler.ERROR):
				                    		switchState(3,error);
			                    			lbError.text = 'Error('+file.errorID+'): '+file.errorMessage;
				                    		break;
				                    	
				                    	case(FileStateHandler.RAMLOADING):
				                    		switchState(2,ramloading,0x33CC00);
				                    		progress.setProgress(file.bytesLoaded, file.bytesTotal);
				                    		progress.label = 'loading file... '
				                    		+ Math.ceil((file.bytesLoaded/file.bytesTotal)*100)+'%';
				                    		break;
				                    	
				                    	case(FileStateHandler.CHECKSUMMING):
				                    		switchState(2,checksumming,0x33CC00);
				                    		progress.setProgress(file.bytesLoaded, file.bytesTotal);
				                    		progress.label = 'calculating checksum... '
				                    		+ Math.ceil((file.bytesLoaded/file.bytesTotal)*100)+'%';
				                    		break;
				                    	
				                    	case(FileStateHandler.UPLOADING):
				                    		switchState(2,uploading,0x009DFF);
				                    		progress.setProgress(file.bytesLoaded, file.bytesTotal);
				                    		progress.label = 'uploading... ('+outerDocument.size2str(file.bytesPerSecond)+'/s) '
				                    		+ Math.ceil((file.bytesLoaded/file.bytesTotal)*100)+'%';
				                    		break;
				                    	
				                    }

				                    lbName.text = file.name;
				                    lbSize.text = outerDocument.size2str(file.size);
				                } 
				            } 
				            
				            private function switchState(state:int,imgSrc:Class=null,trackCol:int=-1):void
				            {
				            	if(_currentState != state)
				            	{
				            		switch(state)
				            		{
				            			case(1):
				            				//setStyle('backgroundColor', null);
				            				progress.visible = false;
			                    			progress.includeInLayout = false;
			                    			lbError.visible = false;
			                    			lbError.includeInLayout = false;
				            				break;
				            			
				            			case(2):
				            				//setStyle('backgroundColor', 0xECECEC);
				            				progress.visible = true;
			                    			progress.includeInLayout = true;
			                    			lbError.visible = false;
			                    			lbError.includeInLayout = false;
				            				break;
				            				
				            			case(3):
				            				progress.visible = false;
			                    			progress.includeInLayout = false;
			                    			lbError.visible = true;
			                    			lbError.includeInLayout = true;
				            				break;
				            		}
				            		
				            		_currentState = state;
				            	}
				            	
				            	if(_currentImg != imgSrc)
				            	{
				            		img.source=new imgSrc();
				            		
				            		_currentImg = imgSrc;
				            	}
				            	
				            	if(trackCol>=0 && _currentTrackCol != trackCol)
				            	{
				            		progress.setStyle('barColor',trackCol);
				            		_currentTrackCol = trackCol;
				            	}
				            } 
				        ]]>
				    </mx:Script>
					
					<mx:Image id="img" left="2" />
					<mx:Label id="lbSize" right="2" />
					<mx:Label id="lbName" left="20" width="{width - lbSize.width - 20}" fontWeight="bold" truncateToFit="true" />
					<mx:Label id="lbError" 
								top="20" left="20" right="2"
								visible="false" includeInLayout="false" />
					<mx:ProgressBar id="progress" labelPlacement="center" 
								minimum="0" maximum="100" mode="manual" label="0%" 
								top="20" left="2" right="2"
								visible="false" includeInLayout="false" />
				</mx:Canvas>
			</mx:Component>
		</mx:itemRenderer>	
	</mx:List>
	
	<mx:Label id="status" selectable="false" color="#666666" right="0" bottom="38" width="{width}" textAlign="right" truncateToFit="true" />
	<mx:HBox width="100%" left="10" right="0" bottom="70">
		<mx:Label text="{resourceManager.getString('resources', 'scat.file.upload.tag')}" />
		<mx:TextInput width="100" id="tag" />
	</mx:HBox>		
	<mx:HBox width="100%" horizontalAlign="right" left="0" right="0" bottom="0">
		<mx:Button id="btnAdd" label="{resourceManager.getString('resources', 'scat.file.upload.add')}" icon="@Embed('fileUploaderClasses/add.png')" click="clickAddFiles()" paddingLeft="3" paddingRight="3" toolTip="{resourceManager.getString('resources', 'scat.file.upload.addfiles')}"/>
		<mx:Button id="btnRemove" label="{resourceManager.getString('resources', 'scat.file.upload.remove')}" icon="@Embed('fileUploaderClasses/delete.png')" click="clickRemoveFiles()" paddingLeft="3" paddingRight="3" toolTip="{resourceManager.getString('resources', 'scat.file.upload.remfiles')}"/>
		<mx:Button id="btnUpload" label="{resourceManager.getString('resources', 'scat.file.upload.upload')}" click="clickUploadFiles()" fillAlphas="[1.0, 1.0]" fillColors="[#D1E1D1, #4DA24B]" themeColor="#49CE46" width="60" paddingLeft="3" paddingRight="3"/>
	</mx:HBox>
	
</mx:Canvas>